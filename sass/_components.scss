//*
//* LOGO
//*

.logo {
	height: 3.25rem;
	margin-left: 2rem;
}

//*
//* SEARCH
//*

.search {
	flex: 0 0 40%;

	display: flex;
	align-items: center;
	justify-content: center;

	@media only screen and (max-width: $bp-smallest) {
		order: 1;
		flex: 100%;
		margin-left: 1rem; //
		margin-right: 2.75rem; // bigger size od the left one, because the whole input is moved to right bcs of negative margins, trial and error
		margin-bottom: 0.5rem;
	}

	&__input {
		font-family: inherit;
		font-size: inherit;
		color: inherit;
		background-color: var(--color-grey-light-2);
		border: none;

		padding: 0.7rem 2rem;
		padding-right: 3.75rem; // text won't overlay the button
		border-radius: 100rem;
		width: 90%; // so that it can grow on hover
		transition: all 0.2s;
		margin-right: -3.5rem; // shifts the entire space left, as opposed to position:relative which would shift only the content, leaving the empty space on the rigth

		&:focus {
			outline: none;
			width: 100%;
			background-color: var(--color-grey-light-3);
		}

		&::placeholder {
			font-weight: 100;
			color: var((--color-grey-dark-3));
		}
	}

	&__button {
		border: none;
		background-color: transparent; // my implementation which is cleary superior
		cursor: pointer;
		transition: transform 0.2s;
		position: relative;
		top: 1px;

		&:focus {
			outline: none;
		}

		&:active {
			// transform: translateY(2px); /* i didn't like the animation */
			transform: scale(0.95);
		}
	}

	&__icon {
		width: var(--icon-dimension-medium);
		height: var(--icon-dimension-medium);
		fill: var(--color-grey-dark-3);
	}
}

//*
//* USER NAVIGATION
//*

.user-nav {
	align-self: stretch; // fills the entir height of the container, overwriting the align-items:center

	display: flex;
	align-items: center;

	& > * {
		padding: 0 2rem;
		cursor: pointer;
		height: 100%; // make each child fill the entire height -> hover background-color can now fill the entire height
		//align-self: stretch; /* my alterative to height:100% */

		display: flex;
		align-items: center;

		&:hover {
			background-color: var(--color-grey-light-2);

			@media (hover: none) {
				background-color: none;
			}
		}
	}

	&__icon-box {
		position: relative;
	}

	&__icon-box:hover &__notification {
		background-color: var(--color-primary-light);
	}

	&__icon {
		width: var(--icon-dimension-large);
		height: var(--icon-dimension-large);
		fill: var(--color-grey-dark-2);
	}

	&__notification {
		font-size: 0.8rem;
		width: var(--icon-dimension-small);
		height: var(--icon-dimension-small);
		border-radius: 50%;

		background-color: var(--color-primary);
		color: white;

		position: absolute;
		top: 1.6rem;
		right: 1.1rem;

		display: flex;
		justify-content: center;
		align-items: center;
		transition: all 100ms;

		@media only screen and (max-width: $bp-smallest) {
			top: 0;
		}
	}

	&__user {
		display: flex;
		align-items: center;
		position: relative;

		&:hover &-name {
			// color: var(--color-primary);
		}
	}

	&__user-photo {
		border-radius: 50%;
		height: 4rem;
		margin-right: 1rem;
	}

	&__user:hover &__dropdown {
		opacity: 1;
		// transform: scale(1) translateY(0);
		transform: translateX(0);
	}

	&__user:hover &__dropdown-link {
		opacity: 1;
		// transition: opacity 150ms 300ms;
	}

	&__dropdown {
		// transform: scale(1, 0) translateY(-1em);
		transform: translateX(100%);
		opacity: 0;

		position: absolute;
		top: 100%;
		right: -1px;
		background-color: var(--color-grey-light-1);
		z-index: 20;

		box-shadow: var(--shadow-dark);

		transition: all 400ms ease-in-out;
		// transform-origin: top;
	}

	&__dropdown-item {
		list-style: none;
	}

	&__dropdown-link {
		opacity: 0;

		text-decoration: none;
		color: inherit;
		display: block;
		text-align: center;
		padding: 0.4em 3em;

		transition: opacity 150ms;

		&:hover {
			color: black;
			background-color: var(--color-grey-light-2);
		}
	}

	//TODO cant get svgs to work
	&__dropdown-icon {
		display: none;
		width: var(--icon-dimension-large);
		height: var(--icon-dimension-large);
		fill: var(--color-grey-dark-2);
	}
}

//*
//* SIDE NAVIGATION
//*

.side-nav {
	font-size: 1.4rem;
	list-style: none;
	margin-top: 3.5rem;

	@media only screen and (max-width: $bp-medium) {
		margin: 0;
		display: flex;
	}

	&__item {
		position: relative;

		&:not(:last-child) {
			margin-bottom: 0.5rem;

			@media only screen and (max-width: $bp-medium) {
				margin-bottom: 0;
			}
		}

		@media only screen and (max-width: $bp-medium) {
			flex: 1; // ocupy the extra space, basically 25% each item

			&:not(:last-child) {
				margin-bottom: 0;
			}
		}
	}

	&__item::before {
		content: "";
		position: absolute;
		top: 0;
		left: 0;
		height: 100%;
		width: 3px;
		background-color: var(--color-primary);

		transform: scaleY(0);
		transform-origin: center; // default value
		transition: transform 200ms, width 400ms 200ms cubic-bezier(1, 0, 0, 1),
			background-color 100ms; // we want width animation to start immediately after transform is done, thus delay=200ms
	}

	&__item:hover::before,
	&__item--active::before {
		transform: scaleY(1);
		width: 100%;
	}

	&__item:active::before {
		background-color: var(--color-primary-light);
	}

	&__link:link,
	&__link:visited {
		color: var(--color-grey-light-1);
		text-decoration: none;
		text-transform: uppercase;

		display: block;
		padding: 1.5rem 3rem;
		position: relative; // z-index wont work without it
		z-index: 10; // only works if we have specified positon

		display: flex;
		align-items: center;

		@media only screen and (max-width: $bp-medium) {
			padding: 2rem;
			justify-content: center;
		}

		@media only screen and (max-width: $bp-small) {
			padding: 1.5rem 0.2rem;
			flex-direction: column;
		}
	}

	&__icon {
		width: var(--icon-dimension-small);
		height: var(--icon-dimension-small);
		margin-right: 2rem;
		fill: currentColor;

		@media only screen and (max-width: $bp-small) {
			width: var(--icon-dimension-xs);
			height: var(--icon-dimension-xs);
			margin-right: 0;
			margin-bottom: 0.75rem;
		}
	}
}

//*
//* LEGAL TEXT
//*

.legal {
	font-size: 1.2rem;
	text-align: center;
	padding: 2.5rem;
	color: var(--color-grey-light-4);

	@media only screen and (max-width: $bp-medium) {
		display: none;
	}
}

//*
//* GALLERY
//*

.gallery {
	display: flex;
	z-index: 10;
	position: relative;

	&__item {
		overflow: hidden; // for the scale hover animation
		position: relative;
	}

	&__item:hover &__photo {
		filter: blur(3px);
		transform: scale(1.15);
	}

	&__caption {
		font-size: 4rem;
		user-select: none;
		opacity: 0;

		position: absolute;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%) scale(0);
		transition: all 400ms;
	}

	&__item:hover &__caption {
		opacity: 1;
		transform: translate(-50%, -50%) scale(1);
	}

	&__photo {
		width: 100%;
		display: block; // to eliminate the space below which inline element gives
		transition: all 400ms;
	}
}

//*
//* HOTEL OVERVIEW
//*

.overview {
	display: flex;
	align-items: center;

	border-bottom: var(--line);

	@media only screen and (max-width: $bp-smallest) {
		flex-wrap: wrap;
		justify-content: space-between;
	}

	&__heading {
		text-transform: uppercase;
		font-size: 2.25rem;
		font-weight: 300;
		letter-spacing: 1px;
		padding: 1.5rem 3rem;
		padding-right: 2rem;

		@media only screen and (max-width: $bp-smallest) {
			flex: 100%;
			text-align: center;
			padding-bottom: 0;
			font-size: 2.5rem;
		}
	}

	&__stars {
		margin-right: auto; //* AMAZING TRICK, right margin occupies the entire available space */
		display: flex; // fixes the icon--star not being perfectly vertically centered; it removes the extra whitespace on the bottom that the inline property of the svg produces

		@media only screen and (max-width: $bp-smallest) {
			flex: 1;
			margin: 1.5rem 1rem 1.5rem 3rem;
		}
	}

	&__icon--star:hover {
		transform: scale(1.3) rotate(20deg);
	}

	&__icon--star,
	&__icon--location {
		width: var(--icon-dimension-medium);
		height: var(--icon-dimension-medium);
		fill: var(--color-primary);
		transition: transform 200ms;
	}

	&__location {
		font-size: 1.3rem;
		display: flex;
		align-items: center;
		margin: 0 2.5rem;
	}

	&__location:hover &__icon--location {
		transform: scale(1.3);
	}

	&__icon--location {
		margin-right: 0.5rem;
	}

	&__rating {
		background-color: var(--color-primary);
		color: white;
		margin-left: 3rem;
		padding: 0 2.25rem;

		align-self: stretch; // to fill the entire width, overwrites the align:center of .overview

		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;

		@media only screen and (max-width: $bp-small) {
			margin-left: auto;
		}
	}

	&__rating-average {
		font-size: 2.8rem;
		font-weight: 300;
		margin: -0.2rem;

		@media only screen and (max-width: $bp-smallest) {
			font-size: 2.8rem;
		}
	}

	&__rating-count {
		font-size: 0.8rem;
		text-transform: uppercase;
		text-align: center;

		@media only screen and (max-width: $bp-smallest) {
			display: none;
		}
	}
}

//*
//* BUTTON INLINE
//*

.btn-inline {
	border: none;
	font-size: inherit; // makes it reusable across the page
	color: var(--color-primary);
	border-bottom: 1px solid currentColor; // always match the text color
	background-color: transparent;
	padding: 0.2rem;

	cursor: pointer;
	transition: all 200ms;

	span {
		margin-left: 3px;
		transition: margin-left 200ms;
	}

	&:hover {
		color: var(--color-grey-dark-1);
		// border automatically updates to matches the new text color, beacause of defined currentColor

		span {
			margin-left: 8px;
		}
	}

	&:focus {
		outline: none; // removes default blue border
		animation: pulsate 1s infinite;
	}
}

@keyframes pulsate {
	from {
		transform: scale(1);
		box-shadow: none;
	}

	50% {
		transform: scale(1.05);
		box-shadow: 0 1rem 4rem rgba($color: black, $alpha: 0.25);
	}

	to {
		transform: scale(1);
		box-shadow: none;
	}
}

//*
//* PARAGRAPH
//*
.paragraph {
	margin-bottom: 2rem; // margin of 2nd paragraph collapses with the list margin
}

//*
//* LIST
//*

.list {
	list-style: none;
	margin: 3rem 0;
	padding: 3rem 0;
	border-top: var(--line);
	border-bottom: var(--line);

	display: flex;
	flex-wrap: wrap;

	@media only screen and (max-width: $bp-small) {
		justify-content: space-around;
	}

	&__item {
		flex: 0 0 50%;
		margin-bottom: 0.7rem; // margins will collapse for the last items

		@media only screen and (max-width: $bp-small) {
			flex: 0 0 45%;
		}

		&::before {
			//content: url("../img/chevron-thin-right.svg"); // my try at the possible approach
			content: "";
			display: inline-block;
			height: 1rem;
			width: 1rem;
			margin-right: 0.7rem;

			// Older browsers
			background-image: url(../img/chevron-thin-right.svg);
			background-size: cover;

			// Never browsers - masks
			@supports (-webkit-mask-image: url()) or (mask-image: url()) {
				background: var(
					--color-primary
				); // must be either shorthand or background-image:none, to remove property for older browsers
				-webkit-mask-image: url(../img/chevron-thin-right.svg);
				-webkit-mask-size: cover; // fit entire image
				mask-image: url(../img/chevron-thin-right.svg);
				mask-size: cover;
				// masks give us ability to change color, so older browsers will have the icon without our primary color
			}
		}
	}
}

//*
//* RECOMMEND
//*

.recommend {
	font-size: 1.3rem;
	color: var(--color-grey-dark-3);

	display: flex;
	align-items: center;

	&__count {
		margin-right: auto; // same thing as justify-content: space-between;, so don't know why we used exactly this
	}

	&__friends {
		display: flex;
		// centers the photos, needed because there was some whitespace at the bottom
		// also makes them all always in one row, instead of pushing photos in the next row on smaller screen sites
		margin-left: 1rem;
	}

	&__photo {
		box-sizing: content-box; // Add the border on top of the image dimensions
		// beacuse the added border shrank the image
		height: 4rem;
		width: 4rem;
		border-radius: 50%;
		border: 3px solid white;
		transition: all 200ms;

		&:not(:last-child) {
			margin-right: -1.75rem;
		}

		&:hover {
			position: relative;
			z-index: 1;
			transform: scale(1.1) rotate(5deg);
		}
	}
}

//*
//* REVIEWS
//*

.review {
	background-color: white;
	box-shadow: var(--shadow-light);
	padding: 3rem;
	margin-bottom: 3.5rem;
	position: relative;
	overflow: hidden; // to hide quotation marks overflowing out of the box
	width: 100%; // fixes the uneven width on smaller screens when text isnt long enough, overides max-content

	@media only screen and (max-width: $bp-medium) {
		padding: 2rem;
		margin-bottom: 2.75rem;
	}

	&__text {
		margin-bottom: 2rem;
		z-index: 10;
		position: relative; // requirement for z-index to work
	}

	&__user {
		display: flex;
		align-items: center;
	}

	&__photo {
		height: 4.5rem;
		width: 4.5rem;
		border-radius: 50%;
		margin-right: 1.5rem;
	}

	&__user-box {
		margin-right: auto;
	}

	&__user-name {
		font-size: 1.1rem;
		font-weight: 600;
		text-transform: uppercase;

		margin-bottom: 0.4rem;
	}

	&__user-date {
		font-size: 1rem;
		color: var(--color-grey-dark-3);
	}

	&__rating {
		font-size: 2.2rem;

		color: var(--color-primary);
	}

	&::before {
		content: "\201C"; // left double quotation mark
		position: absolute;
		top: -2.75rem;
		left: -1rem;
		// border: 1px solid salmon;
		line-height: 1;
		font-size: 22rem;
		font-family: sans-serif;

		color: var(--color-grey-light-2);
		z-index: 1;
	}
}

//*
//* CALL-TO-ACTION
//*

.cta {
	padding: 3.5rem 2rem;
	text-align: center;

	@media only screen and (max-width: $bp-medium) {
		padding: 3.5rem 2rem;
	}

	&__book-now {
		font-size: 2rem;
		font-weight: 300;
		text-transform: uppercase;
		margin-bottom: 2.5rem;
	}
}

//*
//* CTA
//*

.btn {
	font-size: 1.5rem;
	font-weight: 300;
	text-transform: uppercase;

	border-radius: 100rem;
	border: none;
	background: var(--color-primary)
		linear-gradient(
			to right,
			var(--color-primary-light),
			var(--color-primary-dark)
		);
	color: white;

	position: relative;
	overflow: hidden; // hides the text when it is outside the button
	cursor: pointer;

	> * {
		display: inline-block;
		width: 100%;
		height: 100%; // same dimensions as its parent element
		transition: all 200ms;
	}

	/* 
	as I figured, only one of span can have position: absolute:
	- if both are taken out of the flow, button wont be visible
	- if neither is absolute (i.e both use transform: translateY, so both are in the flow), button would have to hold both spans at once, and bcs they both have dimensions of 100%, button would be huge

	Basically, one of the spans MUST be taken out of the flow
	*/

	&--visible {
		padding: 2rem 7.5rem;
	}

	&--invisible {
		padding: 2rem 0; // aligns the text vertically, and it's identical to visible button text padding
		// transform: translateY(-100%); // example of why it wont work

		position: absolute;
		left: 0;
		top: -100%; // move it completely outside the button by its complete height, height must be defined
	}

	&:hover {
		background: var(--color-primary)
			linear-gradient(
				to left,
				var(--color-primary-light),
				var(--color-primary-dark)
			);
	}

	&:hover &--visible {
		transform: translateY(100%); // height must be defined for it to work
		bottom: -100%;
	}

	&:hover &--invisible {
		//top: 0;
		transform: translateY(
			100%
		); // my implementation, transition should be smoother
	}

	&:focus {
		outline: none;
		animation: pulsate 1s infinite;
	}
}
